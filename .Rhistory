distmat <- as.matrix(dist(dat[,x_ind], method = "euclidean", upper=TRUE))
Ys <- dat[,-x_ind]
for (i in 1:n){
neighbors <- tail(sort(distmat[i,]),n-1)
print(names(head(sort(neighbors),k)))
}
}
Knn(distmat,c(1,2), 5)
Knn <- function(dat, x_ind, k){
distmat <- as.matrix(dist(dat[,x_ind], method = "euclidean", upper=TRUE))
Ys <- dat[,-x_ind]
for (i in 1:n){
neighbors <- tail(sort(distmat[i,]),n-1)
neighbor_indices <- names(head(sort(neighbors),k)))
print(Ys[as.numeric(neighbor_indices)])
}
}
Knn <- function(dat, x_ind, k){
distmat <- as.matrix(dist(dat[,x_ind], method = "euclidean", upper=TRUE))
Ys <- dat[,-x_ind]
for (i in 1:n){
neighbors <- tail(sort(distmat[i,]),n-1)
neighbor_indices <- as.numeric(names(head(sort(neighbors),k))))
print(neighbor_indices)
}
}
Knn <- function(dat, x_ind, k){
distmat <- as.matrix(dist(dat[,x_ind], method = "euclidean", upper=TRUE))
Ys <- dat[,-x_ind]
for (i in 1:n){
neighbors <- tail(sort(distmat[i,]),n-1)
neighbor_indices <- as.numeric(names(head(sort(neighbors),k)))
print(neighbor_indices)
}
}
Knn(distmat,c(1,2), 5)
Knn <- function(dat, x_ind, k){
distmat <- as.matrix(dist(dat[,x_ind], method = "euclidean", upper=TRUE))
Ys <- dat[,-x_ind]
for (i in 1:n){
neighbors <- tail(sort(distmat[i,]),n-1)
neighbor_indices <- as.numeric(names(head(sort(neighbors),k)))
print(Ys[neighbor_indices)])
}
}
Knn(distmat,c(1,2), 5)
Knn <- function(dat, x_ind, k){
distmat <- as.matrix(dist(dat[,x_ind], method = "euclidean", upper=TRUE))
Ys <- dat[,-x_ind]
for (i in 1:n){
neighbors <- tail(sort(distmat[i,]),n-1)
neighbor_indices <- as.numeric(names(head(sort(neighbors),k)))
print(Ys[neighbor_indices])
}
}
Knn(distmat,c(1,2), 5)
Knn <- function(dat, x_ind, k){
distmat <- as.matrix(dist(dat[,x_ind], method = "euclidean", upper=TRUE))
Ys <- dat[,-x_ind]
print(Ys)
for (i in 1:n){
neighbors <- tail(sort(distmat[i,]),n-1)
neighbor_indices <- as.numeric(names(head(sort(neighbors),k)))
print(Ys[neighbor_indices])
}
}
Knn(distmat,c(1,2), 5)
Knn <- function(dat, x_ind, y_ind,k){
distmat <- as.matrix(dist(dat[,x_ind], method = "euclidean", upper=TRUE))
Ys <- dat[,y_ind]
print(Ys)
for (i in 1:n){
neighbors <- tail(sort(distmat[i,]),n-1)
neighbor_indices <- as.numeric(names(head(sort(neighbors),k)))
print(Ys[neighbor_indices])
}
}
Knn(distmat,c(1,2),3, 5)
dat
dat[,3]
dat[,c(1,2)]
as.matrix(dist(dat[,c(1,2)], method = "euclidean", upper=TRUE))
Knn(dat,c(1,2),3, 5)
?ifelse
Knn <- function(dat, x_ind, y_ind,k){
distmat <- as.matrix(dist(dat[,x_ind], method = "euclidean", upper=TRUE))
Ys <- dat[,y_ind]
print(Ys)
for (i in 1:n){
neighbors <- tail(sort(distmat[i,]),n-1)
neighbor_indices <- as.numeric(names(head(sort(neighbors),k)))
pred_prob <- mean(Ys[neighbor_indices]))
preds <- ifelse(pred_prob >.5, 1, 0)
return(preds)
}
}
Knn <- function(dat, x_ind, y_ind,k){
distmat <- as.matrix(dist(dat[,x_ind], method = "euclidean", upper=TRUE))
Ys <- dat[,y_ind]
print(Ys)
for (i in 1:n){
neighbors <- tail(sort(distmat[i,]),n-1)
neighbor_indices <- as.numeric(names(head(sort(neighbors),k)))
pred_prob <- mean(Ys[neighbor_indices])
preds <- ifelse(pred_prob >.5, 1, 0)
return(preds)
}
}
Knn(dat,c(1,2),3, 5)
Y_yat <- Knn(dat,c(1,2),3, 5)
Y_hat <- Knn(dat,x_ind = c(1,2),y_ind=3,k=5)
y_test <- y-Y_hat
summary(as.factor(y_test))
y
Y_hat
vector(n)
vector(NA,n)
?vector
preds <- vector(numeric, n)
vector(numeric, n)
Knn <- function(dat, x_ind, y_ind,k){
distmat <- as.matrix(dist(dat[,x_ind], method = "euclidean", upper=TRUE))
Ys <- dat[,y_ind]
preds <- rep(NA, n)
for (i in 1:n){
neighbors <- tail(sort(distmat[i,]),n-1)
neighbor_indices <- as.numeric(names(head(sort(neighbors),k)))
pred_prob <- mean(Ys[neighbor_indices])
pred <- ifelse(pred_prob >.5, 1, 0)
preds[i] <- pred
}
return(preds)
}
Y_hats <- Knn(dat,x_ind = c(1,2),y_ind=3,k=5)
y_test <- y-Y_hat
summary(as.factor(y_test))
y_test <- y-Y_hats
summary(as.factor(y_test))
staff_quarters
staff_data
staff_table <- staff_data %>% group_by(standardized_staffer_name, fiscal_year) %>% summarise(salary_total = sum(salary), quarters = length(unique(quarters), title = Mode(standardized_title), member_name_standerdized = Mode(member_name_standerdized), class = Min(class.x, na.rm=TRUE),  district = Mode(district))
staffer_table <- filter()
staff_table <- staff_data %>% group_by(standardized_staffer_name, fiscal_year) %>% summarise(salary_total = sum(salary), quarters = length(unique(quarters)), title = Mode(standardized_title), member_name_standerdized = Mode(member_name_standerdized), class = Min(class.x, na.rm=TRUE),  district = Mode(district))
staff_data$quarter <- quarter(staff_data$date, with_year = FALSE)
staff_table <- staff_data %>% group_by(standardized_staffer_name, fiscal_year) %>% summarise(salary_total = sum(salary), quarters = length(unique(quarter)), title = Mode(standardized_title), member_name_standerdized = Mode(member_name_standerdized), class = Min(class.x, na.rm=TRUE),  district = Mode(district))
staff_table <- staff_data %>% group_by(standardized_staffer_name, fiscal_year) %>% summarise(salary_total = sum(salary), quarters = length(unique(quarter)), title = Mode(standardized_title), member_name_standerdized = Mode(member_name_standerdized), class = min(class.x, na.rm=TRUE),  district = Mode(district))
staff_table
summary(as.factor(staff_table$class))
staff_table <- staff_data %>% group_by(standardized_staffer_name, fiscal_year) %>% summarise(salary_total = sum(salary), quarters = length(unique(quarter)), title = Mode(standardized_title), original_title=Mode(original_title),member_name_standerdized = Mode(member_name_standerdized), class = min(class.x, na.rm=TRUE),  district = Mode(district))
classified_contacts <- read_csv("/Users/alexanderfurnas/Projects/Congressional Capacity/Contacts/Round2/Master List (CH Edits)1.csv")
over_1k <- read_csv("/Users/alexanderfurnas/Projects/Congressional Capacity/Contacts/CCS_Over1k_Contacts_FINAL.csv")
under_1k <- read_csv("/Users/alexanderfurnas/Projects/Congressional Capacity/Contacts/under1k/sampling_frame_under1k.csv")
classified_contacts
over_1k
under_1k
min(under_1k$`Link Expiration`)
min(over_1k$`Link Expiration`)
max(under_1k$`Link Expiration`)
classified_contacts
over_1k
summary(under_1k$Status)
summary(as.factor(under_1k$Status))
over_1k <- left_join(over_1k, dplyr::select(classified_contacts, Email, `Response Type`)
)
over_1k
summary(as.factor(over_1k$`Response Type`))
over_1k <- read_csv("/Users/alexanderfurnas/Projects/Congressional Capacity/Contacts/Round2/Contact_Responses_9.21.csv")
over_1k
summary(as.factor(over_1k$Status))
over_1k <- left_join(over_1k, dplyr::select(classified_contacts, Email, `Response Type`, Prefix, order))
over_1k
over_1k_nonresponse <- filter(over_1k, Status != "Finished Survey")
over_1k_nonresponse
over_1k_nonresponse <- filter(over_1k, Status != "Finished Survey" | Status != "Partially Completed Survey" | Status != "Started Survey")
over_1k_nonresponse
over_1k_nonresponse <- filter(over_1k, Status == "Email Not Sent Yet")
over_1k_nonresponse <- filter(over_1k, Status == "Email Not Sent Yet" & `Response Type` == 1)
over_1k_nonresponse
write_csv(over_1k_nonresponse, "/Users/alexanderfurnas/Projects/Congressional Capacity/Contacts/Round2/Non_Response_9.21.csv")
over_1k_nonresponse <- arrange(over_1k_nonresponse, order)
write_csv(over_1k_nonresponse, "/Users/alexanderfurnas/Projects/Congressional Capacity/Contacts/Round2/Non_Response_9.21.csv")
over_1k_autoresponse <- filter(over_1k, Status == "Email Not Sent Yet" & `Response Type` == 2)
over_1k_autoresponse <- arrange(over_1k_nonresponse, order)
over_1k_autoresponse
over_1k_autoresponse <- arrange(over_1k_autoresponse, order)
over_1k_autoresponse <- filter(over_1k, Status == "Email Not Sent Yet" & `Response Type` == 2)
over_1k_autoresponse <- arrange(over_1k_autoresponse, order)
over_1k_autoresponse
write_csv(over_1k_autoresponse, "/Users/alexanderfurnas/Projects/Congressional Capacity/Contacts/Round2/Autoresponse_9.21.csv")
over_1k_declines <- filter(over_1k, Status == "Email Not Sent Yet" & `Response Type` == 3)
over_1k_declines
staff_table
staff_table <- staff_data %>% group_by(standardized_staffer_name, fiscal_year) %>% summarise(salary_total = sum(salary), quarters = length(unique(quarter)), title = Mode(standardized_title), original_title=Mode(original_title),member_name_standerdized = Mode(member_name_standerdized), num_rows = n(), class = min(class.x, na.rm=TRUE),  district = Mode(district))
staff_table
max(staff_table$num_rows)
staff_table <- mutate(staff_table, estimated_yearly_salary = (salary_total/quarters)*4)
hist(staff_table$estimated_yearly_salary)
summary(staff_table$estimated_yearly_salary)
filter(staff_table, estimated_yearly_salary==-100000 )
filter(staff_table, estimated_yearly_salary > 200000 )
filter(staff_table, estimated_yearly_salary > 300000 )
filter(staff_table, estimated_yearly_salary > 200000 & fiscal_year <2000)
write_csv(staff_table, "/Users/alexanderfurnas/Projects/Congressional Capacity/Staff_Data_Trends/staff_data/cleaned_data/staff_data_9.21.csv")
table(staff_data$fiscal_year, staff_data$quarter)
table(staff_data$fiscal_year, staff_data$quarter)
staff_data$quarter -5
staff_data$date -5
taff_data$date
staff_data$date
staff_data$quarter2 <- quarter(staff_data$date -5)
table(staff_data$fiscal_year, staff_data$quarter2)
?quarter
filter(staff_data, fiscal_year == 1996, quarter==1)
filter(staff_data, fiscal_year == 1996, quarter==1)$date
min(filter(staff_data, fiscal_year == 1996, quarter==1)$date)
as.factor(filter(staff_data, fiscal_year == 1996, quarter==1)$date)
summary(as.factor(filter(staff_data, fiscal_year == 1996, quarter==1)$date))
summary(as.factor(filter(staff_data, fiscal_year == 1996, quarter==1)$date))
summary(as.factor(filter(staff_data, fiscal_year == 1996, quarter==4)$date))
staff_data$fiscal_year[staff_data$fiscal_year < 2001] <- y(staff_data$date[staff_data$fiscal_year < 2001])
staff_data$fiscal_year[staff_data$fiscal_year < 2001] <- year(staff_data$date[staff_data$fiscal_year < 2001])
summary(as.factor(staff_data$fiscal_year))
staff_table <- staff_data %>% group_by(standardized_staffer_name, fiscal_year) %>% summarise(salary_total = sum(salary), quarters = length(unique(quarter)), title = Mode(standardized_title), original_title=Mode(original_title),member_name_standerdized = Mode(member_name_standerdized), num_rows = n(), class = min(class.x, na.rm=TRUE),  district = Mode(district))
staff_table <- staff_data %>% group_by(standardized_staffer_name, fiscal_year) %>% summarise(salary_total = sum(salary), title = Mode(standardized_title), original_title=Mode(original_title),member_name_standerdized = Mode(member_name_standerdized), num_rows = n(), class = min(class.x, na.rm=TRUE),  district = Mode(district))
staff_table$estimated_yearly_salary[staff_table$fiscal_year >2000] <- staff_table$salary_total[staff_table$fiscal_year >2000]
staff_table$estimated_yearly_salary[staff_table$fiscal_year <2001] <- staff_table$salary_total[staff_table$fiscal_year <2001]*4
summary(staff_table$estimated_yearly_salary)
filter(staff_table,estimated_yearly_salary >200000)
filter(staff_data, standardized_staffer_name == "Abrams, Edgar M", fiscal_year == 2010)
unique(filter(staff_data, standardized_staffer_name == "Abrams, Edgar M", fiscal_year == 2010))
select(staff_data, standardized_staffer_name, fiscal_year, salary, standardized_title, original_title, member_name_standerdized, class, district)
dplyr::select(staff_data, standardized_staffer_name, fiscal_year, salary, standardized_title, original_title, member_name_standerdized, class, district)
dplyr::select(staff_data, standardized_staffer_name, fiscal_year, salary, standardized_title, original_title, member_name_standerdized, class.x, district)
unique(dplyr::select(staff_data, standardized_staffer_name, fiscal_year, salary, standardized_title, original_title, member_name_standerdized, class.x, district))
filter(unique(dplyr::select(staff_data, standardized_staffer_name, fiscal_year, salary, standardized_title, original_title, member_name_standerdized, class.x, district)), standardized_staffer_name == "Abrams, Edgar M", fiscal_year == 2010))
filter(unique(dplyr::select(staff_data, standardized_staffer_name, fiscal_year, salary, standardized_title, original_title, member_name_standerdized, class.x, district)), standardized_staffer_name == "Abrams, Edgar M", fiscal_year == 2010)
staff_data <- read_csv("/Users/alexanderfurnas/Projects/Congressional Capacity/Staff_Data_Trends/all_staff_compensation3.csv")
autocoded <- read_csv("/Users/alexanderfurnas/Projects/Congressional Capacity/Staff_Data_Trends/staff_data/autocoded/all_staff_autocoded.csv")
autocoded90s <- read_csv("/Users/alexanderfurnas/Projects/Congressional Capacity/Staff_Data_Trends/classifications_1990s_new_autocoded.csv")
autocoded90s <- autocoded90s %>% filter(autocoded, !is.na(fiscal_year), !is.na(class)) %>% select(name, salary1, class) %>% unique()
autocoded00s <- filter(autocoded, !is.na(fiscal_year), !is.na(class)) %>% select(core_person_id, salary1, class) %>% unique()
staff_data <- left_join(staff_data, autocoded90s, by =c("staffer_name" = "name", "salary" = "salary1"))
staff_data <-left_join(staff_data, autocoded00s, by=c("core_person_id" = "core_person_id", "salary" = "salary1"))
staff_data$class.x[is.na(staff_data$class.x)] <- staff_data$class.y[is.na(staff_data$class.x)]
library(lubridate)
staff_data$m<- as.character(sapply(stringr::str_split(staff_data$date, "/"),function(x) x[1]))
staff_data$d<- as.character(sapply(stringr::str_split(staff_data$date, "/"),function(x) x[2]))
staff_data$y<- as.character(sapply(stringr::str_split(staff_data$date, "/"),function(x) x[3]))
staff_data$date <-   ymd( paste(staff_data$y, staff_data$m, staff_data$d, sep ="-"))
dates <- as.POSIXct(staff_data$date)
fy.tmp <- seq( as.POSIXct('1994-09-30'), length=25, by='year')
fiscalYear <- (1995:2017)[ findInterval(dates,fy.tmp) ]
staff_data$fiscal_year.tmp <- fiscalYear
staff_data$fiscal_year[is.na(staff_data$fiscal_year)] <- staff_data$fiscal_year.tmp[is.na(staff_data$fiscal_year)]
summary(as.factor(staff_data$fiscal_year))
staff_data$fiscal_year[staff_data$fiscal_year >2017 | staff_data$fiscal_year < 1994] <- NA
dates <- as.POSIXct(staff_data$start_date)
fy.tmp <- seq( as.POSIXct('1994-09-30'), length=25, by='year')
fiscalYear <- (1995:2017)[ findInterval(dates,fy.tmp) ]
staff_data$fiscal_year.tmp <- fiscalYear
staff_data$fiscal_year[is.na(staff_data$fiscal_year)] <- staff_data$fiscal_year.tmp[is.na(staff_data$fiscal_year)]
staff_data$date[is.na(staff_data$date)] <- staff_data$start_date[is.na(staff_data$date)]
staff_data$quarter <- quarter(staff_data$date, with_year = FALSE)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
names<- staff_data %>% filter( !is.na(core_person_id)) %>% group_by(core_person_id) %>% summarise(name = Mode(standardized_staffer_name))
staff_data <- left_join(staff_data, names)
staff_data$standardized_staffer_name[!is.na(staff_data$name)] <- staff_data$name[!is.na(staff_data$name)]
staff_data$fiscal_year[staff_data$fiscal_year < 2001] <- year(staff_data$date[staff_data$fiscal_year < 2001])
filter(unique(dplyr::select(staff_data, standardized_staffer_name, fiscal_year, salary, standardized_title, original_title, member_name_standerdized, class.x, district)), standardized_staffer_name == "Abrams, Edgar M", fiscal_year == 2010)
staff_data <- read_csv("/Users/alexanderfurnas/Projects/Congressional Capacity/Staff_Data_Trends/all_staff_compensation3.csv")
autocoded <- read_csv("/Users/alexanderfurnas/Projects/Congressional Capacity/Staff_Data_Trends/staff_data/autocoded/all_staff_autocoded.csv")
autocoded
autocoded90s <- read_csv("/Users/alexanderfurnas/Projects/Congressional Capacity/Staff_Data_Trends/classifications_1990s_new_autocoded.csv")
autocoded90s <- autocoded90s %>% filter(autocoded, !is.na(fiscal_year), !is.na(class)) %>% select(name, salary1, class) %>% unique()
autocoded90s
autocoded90s <- autocoded90s %>% filter(autocoded, !is.na(class)) %>% select(name, salary1, class) %>% unique()
summary(autocoded90s$class)
autocoded90s <- autocoded90s %>% select(name, salary1, class) %>% unique()
autocoded00s <- filter(autocoded, !is.na(fiscal_year), !is.na(class)) %>% select(core_person_id, salary1, class) %>% unique()
staff_data <- left_join(staff_data, autocoded90s, by =c("staffer_name" = "name", "salary" = "salary1"))
staff_data <-left_join(staff_data, autocoded00s, by=c("core_person_id" = "core_person_id", "salary" = "salary1"))
staff_data$class.x[is.na(staff_data$class.x)] <- staff_data$class.y[is.na(staff_data$class.x)]
library(lubridate)
staff_data$m<- as.character(sapply(stringr::str_split(staff_data$date, "/"),function(x) x[1]))
staff_data$d<- as.character(sapply(stringr::str_split(staff_data$date, "/"),function(x) x[2]))
staff_data$y<- as.character(sapply(stringr::str_split(staff_data$date, "/"),function(x) x[3]))
staff_data$date <-   ymd( paste(staff_data$y, staff_data$m, staff_data$d, sep ="-"))
dates <- as.POSIXct(staff_data$date)
fy.tmp <- seq( as.POSIXct('1994-09-30'), length=25, by='year')
fiscalYear <- (1995:2017)[ findInterval(dates,fy.tmp) ]
staff_data$fiscal_year.tmp <- fiscalYear
staff_data$fiscal_year[is.na(staff_data$fiscal_year)] <- staff_data$fiscal_year.tmp[is.na(staff_data$fiscal_year)]
summary(as.factor(staff_data$fiscal_year))
staff_data$fiscal_year[staff_data$fiscal_year >2017 | staff_data$fiscal_year < 1994] <- NA
dates <- as.POSIXct(staff_data$start_date)
fy.tmp <- seq( as.POSIXct('1994-09-30'), length=25, by='year')
fiscalYear <- (1995:2017)[ findInterval(dates,fy.tmp) ]
staff_data$fiscal_year.tmp <- fiscalYear
staff_data$fiscal_year[is.na(staff_data$fiscal_year)] <- staff_data$fiscal_year.tmp[is.na(staff_data$fiscal_year)]
staff_data$date[is.na(staff_data$date)] <- staff_data$start_date[is.na(staff_data$date)]
staff_data$quarter <- quarter(staff_data$date, with_year = FALSE)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
names<- staff_data %>% filter( !is.na(core_person_id)) %>% group_by(core_person_id) %>% summarise(name = Mode(standardized_staffer_name))
staff_data <- left_join(staff_data, names)
staff_data$standardized_staffer_name[!is.na(staff_data$name)] <- staff_data$name[!is.na(staff_data$name)]
staff_data$fiscal_year[staff_data$fiscal_year < 2001] <- year(staff_data$date[staff_data$fiscal_year < 2001])
filter(unique(dplyr::select(staff_data, standardized_staffer_name, fiscal_year, salary, standardized_title, original_title, member_name_standerdized, class.x, district)), standardized_staffer_name == "Abrams, Edgar M", fiscal_year == 2010)
staff_table <- staff_data %>% group_by(standardized_staffer_name, fiscal_year) %>% summarise(salary_total = sum(salary), title = Mode(standardized_title), original_title=Mode(original_title),member_name_standerdized = Mode(member_name_standerdized), num_rows = n(), class = min(class.x, na.rm=TRUE),  district = Mode(district))
staff_table$estimated_yearly_salary[staff_table$fiscal_year >2000] <- staff_table$salary_total[staff_table$fiscal_year >2000]
staff_table$estimated_yearly_salary[staff_table$fiscal_year <2001] <- staff_table$salary_total[staff_table$fiscal_year <2001]*4
summary(staff_table$estimated_yearly_salary)
filter(staff_table,estimated_yearly_salary > 200000)
filter(staff_data, standardized_staffer_name == "Anfinson, T E", fiscal_year == 2016)
unique(filter(staff_data, standardized_staffer_name == "Anfinson, T E", fiscal_year == 2016))
staff_data_u <- filter(unique(dplyr::select(staff_data, standardized_staffer_name, fiscal_year, salary, standardized_title, original_title, member_name_standerdized, class.x, district)))
staff_table <- staff_data_u %>% group_by(standardized_staffer_name, fiscal_year) %>% summarise(salary_total = sum(salary), title = Mode(standardized_title), original_title=Mode(original_title),member_name_standerdized = Mode(member_name_standerdized), num_rows = n(), class = min(class.x, na.rm=TRUE),  district = Mode(district))
staff_table$estimated_yearly_salary[staff_table$fiscal_year >2000] <- staff_table$salary_total[staff_table$fiscal_year >2000]
staff_table$estimated_yearly_salary[staff_table$fiscal_year <2001] <- staff_table$salary_total[staff_table$fiscal_year <2001]*4
staff_data_u <- filter(unique(dplyr::select(staff_data, standardized_staffer_name, fiscal_year, salary, standardized_title, original_title, member_name_standerdized, class.x, district, quarter)))
staff_table <- staff_data_u %>% group_by(standardized_staffer_name, fiscal_year) %>% summarise(salary_total = sum(salary), title = Mode(standardized_title), original_title=Mode(original_title),member_name_standerdized = Mode(member_name_standerdized), num_rows = n(), class = min(class.x, na.rm=TRUE),  district = Mode(district))
staff_table$estimated_yearly_salary[staff_table$fiscal_year >2000] <- staff_table$salary_total[staff_table$fiscal_year >2000]
staff_table$estimated_yearly_salary[staff_table$fiscal_year <2001] <- staff_table$salary_total[staff_table$fiscal_year <2001]*4
summary(staff_table$estimated_yearly_salary)
filter(staff_table,estimated_yearly_salary >200000)
summary(staff_data$quarter)
staff_table <- staff_data_u %>% group_by(standardized_staffer_name, fiscal_year) %>% summarise(salary_total = sum(salary), title = Mode(standardized_title), num_quarters = length(unique(quarter)), original_title=Mode(original_title),member_name_standerdized = Mode(member_name_standerdized), num_rows = n(), class = min(class.x, na.rm=TRUE),  district = Mode(district))
table(staff_table$num_quarters, staff_table$fiscal_year)
summary(as.factor(filter(staff_table,estimated_yearly_salary >200000)$fiscal_year))
staff_table$estimated_yearly_salary[staff_table$fiscal_year >2000] <- staff_table$salary_total[staff_table$fiscal_year >2000]
staff_table$estimated_yearly_salary[staff_table$fiscal_year <2001] <- staff_table$salary_total[staff_table$fiscal_year <2001]*4
summary(as.factor(filter(staff_table,estimated_yearly_salary >200000)$fiscal_year))
summary(as.factor(filter(staff_table,estimated_yearly_salary >300000)$fiscal_year))
library(readr)
library(dplyr)
library(lubridate)
pos114 <- read_csv("/Users/alexanderfurnas/Projects/Maplight_ideal_points/114positions.csv")
pos114 <- pos114 %>% select(-X1)
pos_all <- read_csv("/Users/alexanderfurnas/Projects/Maplight_ideal_points/all_positions.csv")
pos_all <- bind_rows(pos_all, pos114)
dim(pos_all)
cbp <- read_csv("/Users/alexanderfurnas/Projects/Maplight_ideal_points/bills93-114 2.csv")
unique(cbp$BillType)
unique(pos_all$prefix)
pos_all$prefix[pos_all$prefix == "S"] <- "s"
pos_all$prefix[pos_all$prefix == "H"] <- "hr"
pos_all$prefix[pos_all$prefix == "HR"] <- "hres"
pos_all$prefix[pos_all$prefix == "HC"] <- "hconres"
pos_all$prefix[pos_all$prefix == "SR"] <- "sres"
pos_all$prefix[pos_all$prefix == "SJ"] <- "sjres"
pos_all$prefix[pos_all$prefix == "HJ"] <- "hjres"
pos_all$prefix[pos_all$prefix == "SC"] <- "sconres"
cbp_select <- cbp %>% select(BillID, BillNum, BillType, Chamber, Cong, IntrDate, Major)
pos_all <- pos_all %>% left_join(cbp_select, c("number" = "BillNum", "prefix" = "BillType", "session" = "Cong"))
edge_mat <- NA
edge_mat <- pos_all %>% dplyr::select(orgname,BillID)
edge_mat <- edge_mat%>% filter(complete.cases(edge_mat))
edge_mat <- as.matrix(edge_mat)
#kcore filtration
library(igraph)
est_g <- graph_from_edgelist(edge_mat, directed = FALSE)
core <- coreness(est_g)
V(est_g)$core <- coreness(est_g)
core5 <- induced_subgraph(est_g,V(est_g)$core>4)
#extract ids of the bills and orgs to keep
core_names <- V(core5)$name
#filter bills and orgs to the 5 core
pos_all_core <- filter(pos_all, BillID %in% core_names & orgname %in% core_names3)
#summarise bills and orgs after the filtration
org_poscounts_post <- pos_all_core %>% group_by(orgname) %>% summarise(num = n()) %>% arrange(desc(num))
bill_orgcounts_post <- pos_all_core %>% group_by(BillID) %>% summarise(num = n()) %>% arrange(desc(num))
bill_catcounts <- pos_all %>% group_by(orgname, Major) %>% summarise(bill_count = n()) %>% arrange(desc(bill_count))
bill_catcounts <- bill_catcounts %>% filter(bill_count > 1, !is.na(Major))
pos_all_core_dat <- expand.grid(BillID=unique(pos_all_core$BillID), orgname = unique(pos_all_core$orgname))
pos_all_core_dat <- pos_all_core_dat %>% left_join(select(pos_all_core, BillID, orgname, disposition))
pos_all_core_dat <- pos_all_core_dat %>% left_join(unique(select(pos_all_core, BillID, Major)))
pos_all_core_dat <- pos_all_core_dat %>% left_join(bill_catcounts)
library(tibble)
pos_all_core_dat <- as_tibble(pos_all_core_dat)
pos_all_core_dat$disposition[is.na(pos_all_core_dat$disposition) & !is.na(pos_all_core_dat$bill_count)] <- "abstention"
pos_all_core_abst <- filter(pos_all_core_dat, !is.na(disposition))
pos_all_core_abst
pos_all_core <- filter(pos_all, BillID %in% core_names & orgname %in% core_names5)
pos_all_core <- filter(pos_all, BillID %in% core_names & orgname %in% core_names)
org_poscounts_post <- pos_all_core %>% group_by(orgname) %>% summarise(num = n()) %>% arrange(desc(num))
bill_orgcounts_post <- pos_all_core %>% group_by(BillID) %>% summarise(num = n()) %>% arrange(desc(num))
bill_catcounts <- pos_all %>% group_by(orgname, Major) %>% summarise(bill_count = n()) %>% arrange(desc(bill_count))
bill_catcounts <- bill_catcounts %>% filter(bill_count > 1, !is.na(Major))
pos_all_core_dat <- expand.grid(BillID=unique(pos_all_core$BillID), orgname = unique(pos_all_core$orgname))
pos_all_core_dat <- pos_all_core_dat %>% left_join(select(pos_all_core, BillID, orgname, disposition))
pos_all_core_dat <- pos_all_core_dat %>% left_join(unique(select(pos_all_core, BillID, Major)))
pos_all_core_dat <- pos_all_core_dat %>% left_join(bill_catcounts)
library(tibble)
pos_all_core_dat <- as_tibble(pos_all_core_dat)
pos_all_core_dat$disposition[is.na(pos_all_core_dat$disposition) & !is.na(pos_all_core_dat$bill_count)] <- "abstention"
pos_all_core_abst <- filter(pos_all_core_dat, !is.na(disposition))
house_votes <- read_csv("/Users/alexanderfurnas/Projects/Maplight_ideal_points/Bill_Data/house_votes.csv")
unique(filter(staff_data, standardized_staffer_name == "Anfinson, T E", fiscal_year == 2016)$name)
unique(filter(staff_data, standardized_staffer_name == "Awan, Abid A", fiscal_year == 2016)$name)
names(staff_data)
unique(filter(staff_data, standardized_staffer_name == "Awan, Abid A", fiscal_year == 2016)$staffer_name)
unique(filter(staff_data, standardized_staffer_name == "Awan, Abid A", fiscal_year == 2016)$staffer_name)
unique(filter(staff_data, standardized_staffer_name == "Anfinson, T E", fiscal_year == 2016)$staffer_name)
unique(filter(staff_data, standardized_staffer_name == "Barry, Pamela Ann", fiscal_year == 2001)$staffer_name)
Unique(filter(staff_table, estimated_salary > 200000)$standardized_staffer_name))
unique(filter(staff_table, estimated_salary > 200000)$standardized_staffer_name)
unique(filter(staff_table, estimated_yearly_salary > 200000)$standardized_staffer_name)
write_csv(staff_table, "/Users/alexanderfurnas/Projects/Congressional Capacity/Staff_Data_Trends/staff_data/cleaned_data/staff_data_9.24.csv")
rollcalls <- read_csv("HSall_rollcalls.csv")
rollcalls <- read_csv("/Users/alexanderfurnas/Projects/Maplight_ideal_points/Bill_Data/HSall_rollcalls.csv")
voted <- read_csv("/Users/alexanderfurnas/Projects/Maplight_ideal_points/Bill_Data/HSall_votes.csv")
rollcalls
pos_all_core_abst
min(pos_all_core_abst$BillID)
rollcalls <- filter(rollcalls, congress > 108)
rollcalls
votes <- read_csv("/Users/alexanderfurnas/Projects/Maplight_ideal_points/Bill_Data/HSall_votes.csv")
votes
votes <- filter(votes, congress > 108)
votes
rollcalls
rollcalls$bill_type <- gsub("[^0-9]", "",rollcalls$bill_number)
unique(rollcalls$bill_type)
rollcalls$bill_type <- gsub("![^0-9]", "", rollcalls$bill_number)
unique(rollcalls$bill_type)
gsub("![^0-9]", "","HRES422")
gsub("[0-9]", "","HRES422")
rollcalls$bill_type <- gsub("[0-9]", "", rollcalls$bill_number)
unique(rollcalls$bill_type)
rollcalls$bill_num <- gsub("[^0-9]", "", rollcalls$bill_number)
rollcalls$BillID <- paste(rollcalls$congress, rollcalls$bill_type, rollcalls$bill_num, sep ="-")
rollcalls$BillID
pos_all_core_abst
rollcalls
votes
rollcalls <- dplyr::select(rollcalls, congress, chamber, rollnumber, BillID)
votes <- votes %>% left_join(rollcalls)
votes
unique(votes$BillID)
length(unique(votes$BillID))
unique(votes$cast_code)
summary(as.factor(votes$cast_code))
votes
pos_all_core_abst
votes <- votes %>% select(BillID, icpsr, cast_code)
votes <-  filter(votes, BillID %in% core_names)
votes
pos_all_core
pos_all_core_abst
unique(votes$cast_code)
votes$disposition[votes$cast_code == 6 | votes$cast_code == 6] <- "abstention"
summary(votes$disposition)
summary(as.factor(votes$disposition))
votes$disposition[votes$cast_code == 1] <- "support"
votes$disposition[votes$cast_code == 6] <- "oppose"
votes$disposition[votes$cast_code == 6 | votes$cast_code == 6] <- "abstention"
summary(as.factor(votes$disposition))
votes$disposition[votes$cast_code == 1] <- "support"
votes$disposition[votes$cast_code == 6] <- "oppose"
votes$disposition[votes$cast_code == 7 | votes$cast_code == 9] <- "abstention"
summary(as.factor(votes$disposition))
pos_all
bill_orgcounts_post
bill_major <- pos_all %>% dplyr::select(BillID, Major) %>% unique()
bill_major
votes <- votes %>% left_join(bill_major)
MOC_catcounts <- votes %>% group_by(icpsr, Major) %>% summarise(bill_count = n()) %>% arrange(desc(bill_count))
MOC_catcounts
MOC_catcounts <- MOC_catcounts %>% filter(bill_count > 1, !is.na(Major))
votes <- votes %>% left_join(MOC_catcounts)
votes
votes_abst <- filter(votes, !is.na(bill_count))
votes_abst
votes_abst <- votes_abst %>% select(-cast_code) %>% rename(orgname=icpsr)
votes_abst
pos_all_core_abst
final_positions_edgelist <- bind_rows(pos_all_core_abst,votes_abst)
votes_abst$orgname <- as.character(votes_abst$orgname)
final_positions_edgelist <- bind_rows(pos_all_core_abst,votes_abst)
write_csv(final_positions_edgelist, "/Users/alexanderfurnas/Projects/Maplight_ideal_points/all_positions_withabstention_andCong.csv")
summary(as.factor(votes_abst$disposition))
staff_table
staffer_tops <- staff_table %>% filter(estimated_yearly_salary > 180)
staffer_tops <- staff_table %>% arrange(desc(estimated_yearly_salary))
staffer_tops
staffer_tops
staffer_tops <- select(-district)
staffer_tops <- taffer_tops %>% select(-district)
staffer_tops <- staffer_tops %>% select(-district)
staffer_tops
staffer_tops$estimated_yearly_salary
staffer_tops <- staffer_tops %>% filter(estimated_yearly_salary > 20000)
staffer_tops
staff_table
staffer_tops <- staffer_tops %>% filter(estimated_yearly_salary > 200000)
staffer_tops
summary(as.factor(staffer_tops$fiscal_year)
)
library(ggplot2)
ggplot(staffer_tops, aes(x=fiscal_year), y=estimated_yearly_salary) +geom_scatter()
ggplot(staffer_tops, aes(x=fiscal_year), y=estimated_yearly_salary) +geom_point()
ggplot(staffer_tops, aes(x=fiscal_year, y=estimated_yearly_salary) +geom_point()
)
staff_table
ggplot(staffer_tops, aes(x=fiscal_year, y=estimated_yearly_salary)) +geom_point()
gc()
gc()
